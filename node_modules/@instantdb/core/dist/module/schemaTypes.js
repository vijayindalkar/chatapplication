export class DataAttrDef {
    constructor(valueType, required, config = { indexed: false, unique: false }) {
        this.valueType = valueType;
        this.required = required;
        this.config = config;
    }
    optional() {
        return new DataAttrDef(this.valueType, false);
    }
    unique() {
        return new DataAttrDef(this.valueType, this.required, Object.assign(Object.assign({}, this.config), { unique: true }));
    }
    indexed() {
        return new DataAttrDef(this.valueType, this.required, Object.assign(Object.assign({}, this.config), { indexed: true }));
    }
}
export class LinkAttrDef {
    constructor(cardinality, entityName) {
        this.cardinality = cardinality;
        this.entityName = entityName;
    }
}
export class EntityDef {
    constructor(attrs, links) {
        this.attrs = attrs;
        this.links = links;
    }
    asType() {
        return new EntityDef(this.attrs, this.links);
    }
}
export class InstantSchemaDef {
    constructor(entities, links, rooms) {
        this.entities = entities;
        this.links = links;
        this.rooms = rooms;
    }
    /**
     * @deprecated
     * `withRoomSchema` is deprecated. Define your schema in `rooms` directly:
     *
     * @example
     * // Before:
     * const schema = i.schema({
     *   // ...
     * }).withRoomSchema<RoomSchema>()
     *
     * // After
     * const schema = i.schema({
     *  rooms: {
     *    // ...
     *  }
     * })
     *
     * @see https://instantdb.com/docs/presence-and-topics#typesafety
     */
    withRoomSchema() {
        return new InstantSchemaDef(this.entities, this.links, {});
    }
}
/**
 * @deprecated
 * `i.graph` is deprecated. Use `i.schema` instead.
 *
 * @see https://instantdb.com/docs/modeling-data
 */
export class InstantGraph {
    constructor(entities, links) {
        this.entities = entities;
        this.links = links;
    }
    withRoomSchema() {
        return new InstantGraph(this.entities, this.links);
    }
}
//# sourceMappingURL=schemaTypes.js.map