{"version":3,"file":"helperTypes.js","sourceRoot":"","sources":["../src/helperTypes.ts"],"names":[],"mappings":"","sourcesContent":["import type {\n  InstaQLEntity,\n  InstaQLResult,\n  InstaQLParams,\n  Remove$,\n} from \"./queryTypes\";\nimport type { IContainEntitiesAndLinks, InstantSchemaDef } from \"./schemaTypes\";\nimport type { IInstantDatabase } from \"./coreTypes\";\n\n/**\n * @deprecated \n * `InstantQuery` is deprecated. Use `InstaQLParams` instead. \n * \n * @example\n *  // Before\n *  const db = init_experimental({ ...config, schema });\n *  type DB = typeof db; \n *  const myQuery = { ... } satisfies InstantQuery<DB>;\n * \n *  // After\n *  type Schema = typeof schema;\n *  const myQuery = { ... } satisfies InstaQLParams<Schema>;\n */\nexport type InstantQuery<DB extends IInstantDatabase<any>> =\n  DB extends IInstantDatabase<infer Schema>\n    ? InstaQLParams<Schema>\n    : never;\n\n/**\n * @deprecated \n * `InstantQueryResult` is deprecated. Use `InstaQLResult` instead.\n * \n * @example \n * // Before \n * const db = init_experimental({ ...config, schema }); \n * type DB = typeof db; \n * type MyQueryResult = InstantQueryResult<DB, typeof myQuery>; \n * \n * // After\n * type Schema = typeof schema; \n * type MyQueryResult = InstaQLResult<Schema, typeof myQuery>;\n */\nexport type InstantQueryResult<DB extends IInstantDatabase<any>, Q> =\n  DB extends IInstantDatabase<infer Schema>\n    ? InstaQLResult<Schema, Remove$<Q>>\n    : never;\n/**\n * @deprecated\n * `InstantSchema` is deprecated. Use typeof schema directly: \n * @example \n * // Before \n * const db = init_experimental({ ...config, schema }); \n * type Schema = InstantSchema<typeof db>;\n * \n * // After\n * type Schema = typeof schema;\n */\nexport type InstantSchema<DB extends IInstantDatabase<any>> =\n  DB extends IInstantDatabase<infer Schema> ? Schema : never;\n\n/**\n * @deprecated\n * `InstantEntity` is deprecated. Use `InstaQLEntity` instead.\n * \n * @example\n * // Before\n * const db = init_experimental({ ...config, schema }); \n * type DB = typeof db; \n * type MyEntity = InstantEntity<DB, \"myEntityName\">;\n * \n * // After \n * type Schema = typeof schema; \n * type MyEntity = InstaQLEntity<Schema, \"myEntityName\">;\n */\nexport type InstantEntity<\n  DB extends IInstantDatabase<any>,\n  EntityName extends DB extends IInstantDatabase<infer Schema>\n    ? Schema extends IContainEntitiesAndLinks<infer Entities, any>\n      ? keyof Entities\n      : never\n    : never,\n  Query extends\n    | (DB extends IInstantDatabase<infer Schema>\n        ? Schema extends IContainEntitiesAndLinks<infer Entities, any>\n          ? {\n              [QueryPropName in keyof Entities[EntityName][\"links\"]]?: any;\n            }\n          : never\n        : never)\n    | {} = {},\n> =\n  DB extends IInstantDatabase<infer Schema>\n    ? InstaQLEntity<Schema, EntityName, Query>\n    : never;\n\n/**\n * @deprecated\n * `InstantSchemaDatabase` is deprecated. You generally don't need to \n * create a return type for a DB. But, if you like you can use `IInstantDatabase`:\n * \n * @example\n * // Before\n * type DB = InstantSchemaDatabase<typeof schema>;\n * \n * // After\n * type DB = IInstantDatabase<typeof schema>;\n */\nexport type InstantSchemaDatabase<\n  Schema extends InstantSchemaDef<any, any, any>,\n  _T1 extends any = any,\n  _T2 extends any = any,\n> = IInstantDatabase<Schema>;\n"]}